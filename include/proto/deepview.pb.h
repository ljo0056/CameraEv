// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepview.proto

#ifndef PROTOBUF_INCLUDED_deepview_2eproto
#define PROTOBUF_INCLUDED_deepview_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deepview_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_deepview_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_deepview_2eproto();
namespace deepview {
class Camera;
class CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class CameraWatchdog;
class CameraWatchdogDefaultTypeInternal;
extern CameraWatchdogDefaultTypeInternal _CameraWatchdog_default_instance_;
class Camera_StreamInfo;
class Camera_StreamInfoDefaultTypeInternal;
extern Camera_StreamInfoDefaultTypeInternal _Camera_StreamInfo_default_instance_;
class System;
class SystemDefaultTypeInternal;
extern SystemDefaultTypeInternal _System_default_instance_;
class System_CameraInfo;
class System_CameraInfoDefaultTypeInternal;
extern System_CameraInfoDefaultTypeInternal _System_CameraInfo_default_instance_;
}  // namespace deepview
namespace google {
namespace protobuf {
template<> ::deepview::Camera* Arena::CreateMaybeMessage<::deepview::Camera>(Arena*);
template<> ::deepview::CameraWatchdog* Arena::CreateMaybeMessage<::deepview::CameraWatchdog>(Arena*);
template<> ::deepview::Camera_StreamInfo* Arena::CreateMaybeMessage<::deepview::Camera_StreamInfo>(Arena*);
template<> ::deepview::System* Arena::CreateMaybeMessage<::deepview::System>(Arena*);
template<> ::deepview::System_CameraInfo* Arena::CreateMaybeMessage<::deepview::System_CameraInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace deepview {

// ===================================================================

class Camera_StreamInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deepview.Camera.StreamInfo) */ {
 public:
  Camera_StreamInfo();
  virtual ~Camera_StreamInfo();

  Camera_StreamInfo(const Camera_StreamInfo& from);

  inline Camera_StreamInfo& operator=(const Camera_StreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Camera_StreamInfo(Camera_StreamInfo&& from) noexcept
    : Camera_StreamInfo() {
    *this = ::std::move(from);
  }

  inline Camera_StreamInfo& operator=(Camera_StreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Camera_StreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Camera_StreamInfo* internal_default_instance() {
    return reinterpret_cast<const Camera_StreamInfo*>(
               &_Camera_StreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Camera_StreamInfo* other);
  friend void swap(Camera_StreamInfo& a, Camera_StreamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Camera_StreamInfo* New() const final {
    return CreateMaybeMessage<Camera_StreamInfo>(nullptr);
  }

  Camera_StreamInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Camera_StreamInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Camera_StreamInfo& from);
  void MergeFrom(const Camera_StreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera_StreamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string user_pw = 5;
  void clear_user_pw();
  static const int kUserPwFieldNumber = 5;
  const ::std::string& user_pw() const;
  void set_user_pw(const ::std::string& value);
  #if LANG_CXX11
  void set_user_pw(::std::string&& value);
  #endif
  void set_user_pw(const char* value);
  void set_user_pw(const char* value, size_t size);
  ::std::string* mutable_user_pw();
  ::std::string* release_user_pw();
  void set_allocated_user_pw(::std::string* user_pw);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 stream_accumulate_time = 7;
  void clear_stream_accumulate_time();
  static const int kStreamAccumulateTimeFieldNumber = 7;
  ::google::protobuf::uint32 stream_accumulate_time() const;
  void set_stream_accumulate_time(::google::protobuf::uint32 value);

  // bool tcp = 6;
  void clear_tcp();
  static const int kTcpFieldNumber = 6;
  bool tcp() const;
  void set_tcp(bool value);

  // bool stream_used = 9;
  void clear_stream_used();
  static const int kStreamUsedFieldNumber = 9;
  bool stream_used() const;
  void set_stream_used(bool value);

  // uint32 fps = 8;
  void clear_fps();
  static const int kFpsFieldNumber = 8;
  ::google::protobuf::uint32 fps() const;
  void set_fps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:deepview.Camera.StreamInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr user_pw_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 stream_accumulate_time_;
  bool tcp_;
  bool stream_used_;
  ::google::protobuf::uint32 fps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepview_2eproto;
};
// -------------------------------------------------------------------

class Camera final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deepview.Camera) */ {
 public:
  Camera();
  virtual ~Camera();

  Camera(const Camera& from);

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(Camera&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Camera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Camera* other);
  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return CreateMaybeMessage<Camera>(nullptr);
  }

  Camera* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Camera_StreamInfo StreamInfo;

  // accessors -------------------------------------------------------

  // repeated .deepview.Camera.StreamInfo stream_info = 3;
  int stream_info_size() const;
  void clear_stream_info();
  static const int kStreamInfoFieldNumber = 3;
  ::deepview::Camera_StreamInfo* mutable_stream_info(int index);
  ::google::protobuf::RepeatedPtrField< ::deepview::Camera_StreamInfo >*
      mutable_stream_info();
  const ::deepview::Camera_StreamInfo& stream_info(int index) const;
  ::deepview::Camera_StreamInfo* add_stream_info();
  const ::google::protobuf::RepeatedPtrField< ::deepview::Camera_StreamInfo >&
      stream_info() const;

  // string camera_guid = 1;
  void clear_camera_guid();
  static const int kCameraGuidFieldNumber = 1;
  const ::std::string& camera_guid() const;
  void set_camera_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_camera_guid(::std::string&& value);
  #endif
  void set_camera_guid(const char* value);
  void set_camera_guid(const char* value, size_t size);
  ::std::string* mutable_camera_guid();
  ::std::string* release_camera_guid();
  void set_allocated_camera_guid(::std::string* camera_guid);

  // string camera_name = 2;
  void clear_camera_name();
  static const int kCameraNameFieldNumber = 2;
  const ::std::string& camera_name() const;
  void set_camera_name(const ::std::string& value);
  #if LANG_CXX11
  void set_camera_name(::std::string&& value);
  #endif
  void set_camera_name(const char* value);
  void set_camera_name(const char* value, size_t size);
  ::std::string* mutable_camera_name();
  ::std::string* release_camera_name();
  void set_allocated_camera_name(::std::string* camera_name);

  // @@protoc_insertion_point(class_scope:deepview.Camera)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::deepview::Camera_StreamInfo > stream_info_;
  ::google::protobuf::internal::ArenaStringPtr camera_guid_;
  ::google::protobuf::internal::ArenaStringPtr camera_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepview_2eproto;
};
// -------------------------------------------------------------------

class CameraWatchdog final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deepview.CameraWatchdog) */ {
 public:
  CameraWatchdog();
  virtual ~CameraWatchdog();

  CameraWatchdog(const CameraWatchdog& from);

  inline CameraWatchdog& operator=(const CameraWatchdog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraWatchdog(CameraWatchdog&& from) noexcept
    : CameraWatchdog() {
    *this = ::std::move(from);
  }

  inline CameraWatchdog& operator=(CameraWatchdog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CameraWatchdog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraWatchdog* internal_default_instance() {
    return reinterpret_cast<const CameraWatchdog*>(
               &_CameraWatchdog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CameraWatchdog* other);
  friend void swap(CameraWatchdog& a, CameraWatchdog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraWatchdog* New() const final {
    return CreateMaybeMessage<CameraWatchdog>(nullptr);
  }

  CameraWatchdog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraWatchdog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraWatchdog& from);
  void MergeFrom(const CameraWatchdog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraWatchdog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:deepview.CameraWatchdog)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepview_2eproto;
};
// -------------------------------------------------------------------

class System_CameraInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deepview.System.CameraInfo) */ {
 public:
  System_CameraInfo();
  virtual ~System_CameraInfo();

  System_CameraInfo(const System_CameraInfo& from);

  inline System_CameraInfo& operator=(const System_CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  System_CameraInfo(System_CameraInfo&& from) noexcept
    : System_CameraInfo() {
    *this = ::std::move(from);
  }

  inline System_CameraInfo& operator=(System_CameraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const System_CameraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const System_CameraInfo* internal_default_instance() {
    return reinterpret_cast<const System_CameraInfo*>(
               &_System_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(System_CameraInfo* other);
  friend void swap(System_CameraInfo& a, System_CameraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline System_CameraInfo* New() const final {
    return CreateMaybeMessage<System_CameraInfo>(nullptr);
  }

  System_CameraInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<System_CameraInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const System_CameraInfo& from);
  void MergeFrom(const System_CameraInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(System_CameraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string camera_guid = 1;
  void clear_camera_guid();
  static const int kCameraGuidFieldNumber = 1;
  const ::std::string& camera_guid() const;
  void set_camera_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_camera_guid(::std::string&& value);
  #endif
  void set_camera_guid(const char* value);
  void set_camera_guid(const char* value, size_t size);
  ::std::string* mutable_camera_guid();
  ::std::string* release_camera_guid();
  void set_allocated_camera_guid(::std::string* camera_guid);

  // @@protoc_insertion_point(class_scope:deepview.System.CameraInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr camera_guid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepview_2eproto;
};
// -------------------------------------------------------------------

class System final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deepview.System) */ {
 public:
  System();
  virtual ~System();

  System(const System& from);

  inline System& operator=(const System& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  System(System&& from) noexcept
    : System() {
    *this = ::std::move(from);
  }

  inline System& operator=(System&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const System& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const System* internal_default_instance() {
    return reinterpret_cast<const System*>(
               &_System_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(System* other);
  friend void swap(System& a, System& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline System* New() const final {
    return CreateMaybeMessage<System>(nullptr);
  }

  System* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<System>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const System& from);
  void MergeFrom(const System& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(System* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef System_CameraInfo CameraInfo;

  // accessors -------------------------------------------------------

  // repeated .deepview.System.CameraInfo cameras = 3;
  int cameras_size() const;
  void clear_cameras();
  static const int kCamerasFieldNumber = 3;
  ::deepview::System_CameraInfo* mutable_cameras(int index);
  ::google::protobuf::RepeatedPtrField< ::deepview::System_CameraInfo >*
      mutable_cameras();
  const ::deepview::System_CameraInfo& cameras(int index) const;
  ::deepview::System_CameraInfo* add_cameras();
  const ::google::protobuf::RepeatedPtrField< ::deepview::System_CameraInfo >&
      cameras() const;

  // string system_guid = 1;
  void clear_system_guid();
  static const int kSystemGuidFieldNumber = 1;
  const ::std::string& system_guid() const;
  void set_system_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_system_guid(::std::string&& value);
  #endif
  void set_system_guid(const char* value);
  void set_system_guid(const char* value, size_t size);
  ::std::string* mutable_system_guid();
  ::std::string* release_system_guid();
  void set_allocated_system_guid(::std::string* system_guid);

  // string system_name = 2;
  void clear_system_name();
  static const int kSystemNameFieldNumber = 2;
  const ::std::string& system_name() const;
  void set_system_name(const ::std::string& value);
  #if LANG_CXX11
  void set_system_name(::std::string&& value);
  #endif
  void set_system_name(const char* value);
  void set_system_name(const char* value, size_t size);
  ::std::string* mutable_system_name();
  ::std::string* release_system_name();
  void set_allocated_system_name(::std::string* system_name);

  // @@protoc_insertion_point(class_scope:deepview.System)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::deepview::System_CameraInfo > cameras_;
  ::google::protobuf::internal::ArenaStringPtr system_guid_;
  ::google::protobuf::internal::ArenaStringPtr system_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepview_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Camera_StreamInfo

// string url = 1;
inline void Camera_StreamInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Camera_StreamInfo::url() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.url)
  return url_.GetNoArena();
}
inline void Camera_StreamInfo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.url)
}
#if LANG_CXX11
inline void Camera_StreamInfo::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.Camera.StreamInfo.url)
}
#endif
inline void Camera_StreamInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.Camera.StreamInfo.url)
}
inline void Camera_StreamInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.Camera.StreamInfo.url)
}
inline ::std::string* Camera_StreamInfo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:deepview.Camera.StreamInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera_StreamInfo::release_url() {
  // @@protoc_insertion_point(field_release:deepview.Camera.StreamInfo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera_StreamInfo::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:deepview.Camera.StreamInfo.url)
}

// string ip = 2;
inline void Camera_StreamInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Camera_StreamInfo::ip() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.ip)
  return ip_.GetNoArena();
}
inline void Camera_StreamInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.ip)
}
#if LANG_CXX11
inline void Camera_StreamInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.Camera.StreamInfo.ip)
}
#endif
inline void Camera_StreamInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.Camera.StreamInfo.ip)
}
inline void Camera_StreamInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.Camera.StreamInfo.ip)
}
inline ::std::string* Camera_StreamInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:deepview.Camera.StreamInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera_StreamInfo::release_ip() {
  // @@protoc_insertion_point(field_release:deepview.Camera.StreamInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera_StreamInfo::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:deepview.Camera.StreamInfo.ip)
}

// uint32 port = 3;
inline void Camera_StreamInfo::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Camera_StreamInfo::port() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.port)
  return port_;
}
inline void Camera_StreamInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.port)
}

// string user_id = 4;
inline void Camera_StreamInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Camera_StreamInfo::user_id() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.user_id)
  return user_id_.GetNoArena();
}
inline void Camera_StreamInfo::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.user_id)
}
#if LANG_CXX11
inline void Camera_StreamInfo::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.Camera.StreamInfo.user_id)
}
#endif
inline void Camera_StreamInfo::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.Camera.StreamInfo.user_id)
}
inline void Camera_StreamInfo::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.Camera.StreamInfo.user_id)
}
inline ::std::string* Camera_StreamInfo::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:deepview.Camera.StreamInfo.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera_StreamInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:deepview.Camera.StreamInfo.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera_StreamInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:deepview.Camera.StreamInfo.user_id)
}

// string user_pw = 5;
inline void Camera_StreamInfo::clear_user_pw() {
  user_pw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Camera_StreamInfo::user_pw() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.user_pw)
  return user_pw_.GetNoArena();
}
inline void Camera_StreamInfo::set_user_pw(const ::std::string& value) {
  
  user_pw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.user_pw)
}
#if LANG_CXX11
inline void Camera_StreamInfo::set_user_pw(::std::string&& value) {
  
  user_pw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.Camera.StreamInfo.user_pw)
}
#endif
inline void Camera_StreamInfo::set_user_pw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_pw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.Camera.StreamInfo.user_pw)
}
inline void Camera_StreamInfo::set_user_pw(const char* value, size_t size) {
  
  user_pw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.Camera.StreamInfo.user_pw)
}
inline ::std::string* Camera_StreamInfo::mutable_user_pw() {
  
  // @@protoc_insertion_point(field_mutable:deepview.Camera.StreamInfo.user_pw)
  return user_pw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera_StreamInfo::release_user_pw() {
  // @@protoc_insertion_point(field_release:deepview.Camera.StreamInfo.user_pw)
  
  return user_pw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera_StreamInfo::set_allocated_user_pw(::std::string* user_pw) {
  if (user_pw != nullptr) {
    
  } else {
    
  }
  user_pw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_pw);
  // @@protoc_insertion_point(field_set_allocated:deepview.Camera.StreamInfo.user_pw)
}

// bool tcp = 6;
inline void Camera_StreamInfo::clear_tcp() {
  tcp_ = false;
}
inline bool Camera_StreamInfo::tcp() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.tcp)
  return tcp_;
}
inline void Camera_StreamInfo::set_tcp(bool value) {
  
  tcp_ = value;
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.tcp)
}

// uint32 stream_accumulate_time = 7;
inline void Camera_StreamInfo::clear_stream_accumulate_time() {
  stream_accumulate_time_ = 0u;
}
inline ::google::protobuf::uint32 Camera_StreamInfo::stream_accumulate_time() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.stream_accumulate_time)
  return stream_accumulate_time_;
}
inline void Camera_StreamInfo::set_stream_accumulate_time(::google::protobuf::uint32 value) {
  
  stream_accumulate_time_ = value;
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.stream_accumulate_time)
}

// uint32 fps = 8;
inline void Camera_StreamInfo::clear_fps() {
  fps_ = 0u;
}
inline ::google::protobuf::uint32 Camera_StreamInfo::fps() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.fps)
  return fps_;
}
inline void Camera_StreamInfo::set_fps(::google::protobuf::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.fps)
}

// bool stream_used = 9;
inline void Camera_StreamInfo::clear_stream_used() {
  stream_used_ = false;
}
inline bool Camera_StreamInfo::stream_used() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.StreamInfo.stream_used)
  return stream_used_;
}
inline void Camera_StreamInfo::set_stream_used(bool value) {
  
  stream_used_ = value;
  // @@protoc_insertion_point(field_set:deepview.Camera.StreamInfo.stream_used)
}

// -------------------------------------------------------------------

// Camera

// string camera_guid = 1;
inline void Camera::clear_camera_guid() {
  camera_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Camera::camera_guid() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.camera_guid)
  return camera_guid_.GetNoArena();
}
inline void Camera::set_camera_guid(const ::std::string& value) {
  
  camera_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.Camera.camera_guid)
}
#if LANG_CXX11
inline void Camera::set_camera_guid(::std::string&& value) {
  
  camera_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.Camera.camera_guid)
}
#endif
inline void Camera::set_camera_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.Camera.camera_guid)
}
inline void Camera::set_camera_guid(const char* value, size_t size) {
  
  camera_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.Camera.camera_guid)
}
inline ::std::string* Camera::mutable_camera_guid() {
  
  // @@protoc_insertion_point(field_mutable:deepview.Camera.camera_guid)
  return camera_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera::release_camera_guid() {
  // @@protoc_insertion_point(field_release:deepview.Camera.camera_guid)
  
  return camera_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_allocated_camera_guid(::std::string* camera_guid) {
  if (camera_guid != nullptr) {
    
  } else {
    
  }
  camera_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_guid);
  // @@protoc_insertion_point(field_set_allocated:deepview.Camera.camera_guid)
}

// string camera_name = 2;
inline void Camera::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Camera::camera_name() const {
  // @@protoc_insertion_point(field_get:deepview.Camera.camera_name)
  return camera_name_.GetNoArena();
}
inline void Camera::set_camera_name(const ::std::string& value) {
  
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.Camera.camera_name)
}
#if LANG_CXX11
inline void Camera::set_camera_name(::std::string&& value) {
  
  camera_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.Camera.camera_name)
}
#endif
inline void Camera::set_camera_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.Camera.camera_name)
}
inline void Camera::set_camera_name(const char* value, size_t size) {
  
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.Camera.camera_name)
}
inline ::std::string* Camera::mutable_camera_name() {
  
  // @@protoc_insertion_point(field_mutable:deepview.Camera.camera_name)
  return camera_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera::release_camera_name() {
  // @@protoc_insertion_point(field_release:deepview.Camera.camera_name)
  
  return camera_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_allocated_camera_name(::std::string* camera_name) {
  if (camera_name != nullptr) {
    
  } else {
    
  }
  camera_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:deepview.Camera.camera_name)
}

// repeated .deepview.Camera.StreamInfo stream_info = 3;
inline int Camera::stream_info_size() const {
  return stream_info_.size();
}
inline void Camera::clear_stream_info() {
  stream_info_.Clear();
}
inline ::deepview::Camera_StreamInfo* Camera::mutable_stream_info(int index) {
  // @@protoc_insertion_point(field_mutable:deepview.Camera.stream_info)
  return stream_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::deepview::Camera_StreamInfo >*
Camera::mutable_stream_info() {
  // @@protoc_insertion_point(field_mutable_list:deepview.Camera.stream_info)
  return &stream_info_;
}
inline const ::deepview::Camera_StreamInfo& Camera::stream_info(int index) const {
  // @@protoc_insertion_point(field_get:deepview.Camera.stream_info)
  return stream_info_.Get(index);
}
inline ::deepview::Camera_StreamInfo* Camera::add_stream_info() {
  // @@protoc_insertion_point(field_add:deepview.Camera.stream_info)
  return stream_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::deepview::Camera_StreamInfo >&
Camera::stream_info() const {
  // @@protoc_insertion_point(field_list:deepview.Camera.stream_info)
  return stream_info_;
}

// -------------------------------------------------------------------

// CameraWatchdog

// uint32 pid = 1;
inline void CameraWatchdog::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 CameraWatchdog::pid() const {
  // @@protoc_insertion_point(field_get:deepview.CameraWatchdog.pid)
  return pid_;
}
inline void CameraWatchdog::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:deepview.CameraWatchdog.pid)
}

// -------------------------------------------------------------------

// System_CameraInfo

// string camera_guid = 1;
inline void System_CameraInfo::clear_camera_guid() {
  camera_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& System_CameraInfo::camera_guid() const {
  // @@protoc_insertion_point(field_get:deepview.System.CameraInfo.camera_guid)
  return camera_guid_.GetNoArena();
}
inline void System_CameraInfo::set_camera_guid(const ::std::string& value) {
  
  camera_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.System.CameraInfo.camera_guid)
}
#if LANG_CXX11
inline void System_CameraInfo::set_camera_guid(::std::string&& value) {
  
  camera_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.System.CameraInfo.camera_guid)
}
#endif
inline void System_CameraInfo::set_camera_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.System.CameraInfo.camera_guid)
}
inline void System_CameraInfo::set_camera_guid(const char* value, size_t size) {
  
  camera_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.System.CameraInfo.camera_guid)
}
inline ::std::string* System_CameraInfo::mutable_camera_guid() {
  
  // @@protoc_insertion_point(field_mutable:deepview.System.CameraInfo.camera_guid)
  return camera_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* System_CameraInfo::release_camera_guid() {
  // @@protoc_insertion_point(field_release:deepview.System.CameraInfo.camera_guid)
  
  return camera_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void System_CameraInfo::set_allocated_camera_guid(::std::string* camera_guid) {
  if (camera_guid != nullptr) {
    
  } else {
    
  }
  camera_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_guid);
  // @@protoc_insertion_point(field_set_allocated:deepview.System.CameraInfo.camera_guid)
}

// -------------------------------------------------------------------

// System

// string system_guid = 1;
inline void System::clear_system_guid() {
  system_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& System::system_guid() const {
  // @@protoc_insertion_point(field_get:deepview.System.system_guid)
  return system_guid_.GetNoArena();
}
inline void System::set_system_guid(const ::std::string& value) {
  
  system_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.System.system_guid)
}
#if LANG_CXX11
inline void System::set_system_guid(::std::string&& value) {
  
  system_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.System.system_guid)
}
#endif
inline void System::set_system_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.System.system_guid)
}
inline void System::set_system_guid(const char* value, size_t size) {
  
  system_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.System.system_guid)
}
inline ::std::string* System::mutable_system_guid() {
  
  // @@protoc_insertion_point(field_mutable:deepview.System.system_guid)
  return system_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* System::release_system_guid() {
  // @@protoc_insertion_point(field_release:deepview.System.system_guid)
  
  return system_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void System::set_allocated_system_guid(::std::string* system_guid) {
  if (system_guid != nullptr) {
    
  } else {
    
  }
  system_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_guid);
  // @@protoc_insertion_point(field_set_allocated:deepview.System.system_guid)
}

// string system_name = 2;
inline void System::clear_system_name() {
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& System::system_name() const {
  // @@protoc_insertion_point(field_get:deepview.System.system_name)
  return system_name_.GetNoArena();
}
inline void System::set_system_name(const ::std::string& value) {
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepview.System.system_name)
}
#if LANG_CXX11
inline void System::set_system_name(::std::string&& value) {
  
  system_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepview.System.system_name)
}
#endif
inline void System::set_system_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepview.System.system_name)
}
inline void System::set_system_name(const char* value, size_t size) {
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepview.System.system_name)
}
inline ::std::string* System::mutable_system_name() {
  
  // @@protoc_insertion_point(field_mutable:deepview.System.system_name)
  return system_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* System::release_system_name() {
  // @@protoc_insertion_point(field_release:deepview.System.system_name)
  
  return system_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void System::set_allocated_system_name(::std::string* system_name) {
  if (system_name != nullptr) {
    
  } else {
    
  }
  system_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_name);
  // @@protoc_insertion_point(field_set_allocated:deepview.System.system_name)
}

// repeated .deepview.System.CameraInfo cameras = 3;
inline int System::cameras_size() const {
  return cameras_.size();
}
inline void System::clear_cameras() {
  cameras_.Clear();
}
inline ::deepview::System_CameraInfo* System::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:deepview.System.cameras)
  return cameras_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::deepview::System_CameraInfo >*
System::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:deepview.System.cameras)
  return &cameras_;
}
inline const ::deepview::System_CameraInfo& System::cameras(int index) const {
  // @@protoc_insertion_point(field_get:deepview.System.cameras)
  return cameras_.Get(index);
}
inline ::deepview::System_CameraInfo* System::add_cameras() {
  // @@protoc_insertion_point(field_add:deepview.System.cameras)
  return cameras_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::deepview::System_CameraInfo >&
System::cameras() const {
  // @@protoc_insertion_point(field_list:deepview.System.cameras)
  return cameras_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace deepview

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_deepview_2eproto
