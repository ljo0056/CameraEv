// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CameraInfoFile.proto

#include "CameraInfoFile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_CameraInfoFile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Camera_StreamInfo_CameraInfoFile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CameraInfoFile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_System_CameraInfo_CameraInfoFile_2eproto;
namespace CameraInfoFile {
class Camera_StreamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Camera_StreamInfo> _instance;
} _Camera_StreamInfo_default_instance_;
class CameraDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Camera> _instance;
} _Camera_default_instance_;
class CameraWatchdogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraWatchdog> _instance;
} _CameraWatchdog_default_instance_;
class System_CameraInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<System_CameraInfo> _instance;
} _System_CameraInfo_default_instance_;
class SystemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<System> _instance;
} _System_default_instance_;
}  // namespace CameraInfoFile
static void InitDefaultsCamera_StreamInfo_CameraInfoFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CameraInfoFile::_Camera_StreamInfo_default_instance_;
    new (ptr) ::CameraInfoFile::Camera_StreamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CameraInfoFile::Camera_StreamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Camera_StreamInfo_CameraInfoFile_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCamera_StreamInfo_CameraInfoFile_2eproto}, {}};

static void InitDefaultsCamera_CameraInfoFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CameraInfoFile::_Camera_default_instance_;
    new (ptr) ::CameraInfoFile::Camera();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CameraInfoFile::Camera::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Camera_CameraInfoFile_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCamera_CameraInfoFile_2eproto}, {
      &scc_info_Camera_StreamInfo_CameraInfoFile_2eproto.base,}};

static void InitDefaultsCameraWatchdog_CameraInfoFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CameraInfoFile::_CameraWatchdog_default_instance_;
    new (ptr) ::CameraInfoFile::CameraWatchdog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CameraInfoFile::CameraWatchdog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraWatchdog_CameraInfoFile_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraWatchdog_CameraInfoFile_2eproto}, {}};

static void InitDefaultsSystem_CameraInfo_CameraInfoFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CameraInfoFile::_System_CameraInfo_default_instance_;
    new (ptr) ::CameraInfoFile::System_CameraInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CameraInfoFile::System_CameraInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_System_CameraInfo_CameraInfoFile_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystem_CameraInfo_CameraInfoFile_2eproto}, {}};

static void InitDefaultsSystem_CameraInfoFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CameraInfoFile::_System_default_instance_;
    new (ptr) ::CameraInfoFile::System();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CameraInfoFile::System::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_System_CameraInfoFile_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystem_CameraInfoFile_2eproto}, {
      &scc_info_System_CameraInfo_CameraInfoFile_2eproto.base,}};

void InitDefaults_CameraInfoFile_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Camera_StreamInfo_CameraInfoFile_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Camera_CameraInfoFile_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraWatchdog_CameraInfoFile_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_System_CameraInfo_CameraInfoFile_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_System_CameraInfoFile_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_CameraInfoFile_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_CameraInfoFile_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_CameraInfoFile_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_CameraInfoFile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, url_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, port_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, user_pw_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, tcp_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, stream_accumulate_time_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, fps_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera_StreamInfo, stream_used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera, camera_guid_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera, camera_name_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::Camera, stream_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::CameraWatchdog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::CameraWatchdog, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::System_CameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::System_CameraInfo, camera_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::System, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::System, system_guid_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::System, system_name_),
  PROTOBUF_FIELD_OFFSET(::CameraInfoFile::System, cameras_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CameraInfoFile::Camera_StreamInfo)},
  { 14, -1, sizeof(::CameraInfoFile::Camera)},
  { 22, -1, sizeof(::CameraInfoFile::CameraWatchdog)},
  { 28, -1, sizeof(::CameraInfoFile::System_CameraInfo)},
  { 34, -1, sizeof(::CameraInfoFile::System)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CameraInfoFile::_Camera_StreamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CameraInfoFile::_Camera_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CameraInfoFile::_CameraWatchdog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CameraInfoFile::_System_CameraInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CameraInfoFile::_System_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_CameraInfoFile_2eproto = {
  {}, AddDescriptors_CameraInfoFile_2eproto, "CameraInfoFile.proto", schemas,
  file_default_instances, TableStruct_CameraInfoFile_2eproto::offsets,
  file_level_metadata_CameraInfoFile_2eproto, 5, file_level_enum_descriptors_CameraInfoFile_2eproto, file_level_service_descriptors_CameraInfoFile_2eproto,
};

const char descriptor_table_protodef_CameraInfoFile_2eproto[] =
  "\n\024CameraInfoFile.proto\022\016CameraInfoFile\"\221"
  "\002\n\006Camera\022\023\n\013camera_guid\030\001 \001(\t\022\023\n\013camera"
  "_name\030\002 \001(\t\0226\n\013stream_info\030\003 \003(\0132!.Camer"
  "aInfoFile.Camera.StreamInfo\032\244\001\n\nStreamIn"
  "fo\022\013\n\003url\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001("
  "\r\022\017\n\007user_id\030\004 \001(\t\022\017\n\007user_pw\030\005 \001(\t\022\013\n\003t"
  "cp\030\006 \001(\010\022\036\n\026stream_accumulate_time\030\007 \001(\r"
  "\022\013\n\003fps\030\010 \001(\r\022\023\n\013stream_used\030\t \001(\010\"\035\n\016Ca"
  "meraWatchdog\022\013\n\003pid\030\001 \001(\r\"\211\001\n\006System\022\023\n\013"
  "system_guid\030\001 \001(\t\022\023\n\013system_name\030\002 \001(\t\0222"
  "\n\007cameras\030\003 \003(\0132!.CameraInfoFile.System."
  "CameraInfo\032!\n\nCameraInfo\022\023\n\013camera_guid\030"
  "\001 \001(\tb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_CameraInfoFile_2eproto = {
  false, InitDefaults_CameraInfoFile_2eproto, 
  descriptor_table_protodef_CameraInfoFile_2eproto,
  "CameraInfoFile.proto", &assign_descriptors_table_CameraInfoFile_2eproto, 493,
};

void AddDescriptors_CameraInfoFile_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_CameraInfoFile_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CameraInfoFile_2eproto = []() { AddDescriptors_CameraInfoFile_2eproto(); return true; }();
namespace CameraInfoFile {

// ===================================================================

void Camera_StreamInfo::InitAsDefaultInstance() {
}
class Camera_StreamInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Camera_StreamInfo::kUrlFieldNumber;
const int Camera_StreamInfo::kIpFieldNumber;
const int Camera_StreamInfo::kPortFieldNumber;
const int Camera_StreamInfo::kUserIdFieldNumber;
const int Camera_StreamInfo::kUserPwFieldNumber;
const int Camera_StreamInfo::kTcpFieldNumber;
const int Camera_StreamInfo::kStreamAccumulateTimeFieldNumber;
const int Camera_StreamInfo::kFpsFieldNumber;
const int Camera_StreamInfo::kStreamUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Camera_StreamInfo::Camera_StreamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CameraInfoFile.Camera.StreamInfo)
}
Camera_StreamInfo::Camera_StreamInfo(const Camera_StreamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  user_pw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_pw().size() > 0) {
    user_pw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pw_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&port_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:CameraInfoFile.Camera.StreamInfo)
}

void Camera_StreamInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Camera_StreamInfo_CameraInfoFile_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&port_)) + sizeof(fps_));
}

Camera_StreamInfo::~Camera_StreamInfo() {
  // @@protoc_insertion_point(destructor:CameraInfoFile.Camera.StreamInfo)
  SharedDtor();
}

void Camera_StreamInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Camera_StreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Camera_StreamInfo& Camera_StreamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Camera_StreamInfo_CameraInfoFile_2eproto.base);
  return *internal_default_instance();
}


void Camera_StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraInfoFile.Camera.StreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&port_)) + sizeof(fps_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Camera_StreamInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Camera_StreamInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.Camera.StreamInfo.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.Camera.StreamInfo.ip");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.Camera.StreamInfo.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_pw = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.Camera.StreamInfo.user_pw");
        object = msg->mutable_user_pw();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool tcp = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_tcp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 stream_accumulate_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_stream_accumulate_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 fps = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_fps(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool stream_used = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_stream_used(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Camera_StreamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CameraInfoFile.Camera.StreamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.Camera.StreamInfo.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.Camera.StreamInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.Camera.StreamInfo.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_pw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_pw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_pw().data(), static_cast<int>(this->user_pw().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.Camera.StreamInfo.user_pw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tcp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tcp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stream_accumulate_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_accumulate_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stream_used = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CameraInfoFile.Camera.StreamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CameraInfoFile.Camera.StreamInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Camera_StreamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CameraInfoFile.Camera.StreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.StreamInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.StreamInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.StreamInfo.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // string user_pw = 5;
  if (this->user_pw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_pw().data(), static_cast<int>(this->user_pw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.StreamInfo.user_pw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_pw(), output);
  }

  // bool tcp = 6;
  if (this->tcp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tcp(), output);
  }

  // uint32 stream_accumulate_time = 7;
  if (this->stream_accumulate_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stream_accumulate_time(), output);
  }

  // uint32 fps = 8;
  if (this->fps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fps(), output);
  }

  // bool stream_used = 9;
  if (this->stream_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->stream_used(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CameraInfoFile.Camera.StreamInfo)
}

::google::protobuf::uint8* Camera_StreamInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraInfoFile.Camera.StreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.StreamInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.StreamInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.StreamInfo.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // string user_pw = 5;
  if (this->user_pw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_pw().data(), static_cast<int>(this->user_pw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.StreamInfo.user_pw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_pw(), target);
  }

  // bool tcp = 6;
  if (this->tcp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tcp(), target);
  }

  // uint32 stream_accumulate_time = 7;
  if (this->stream_accumulate_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stream_accumulate_time(), target);
  }

  // uint32 fps = 8;
  if (this->fps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fps(), target);
  }

  // bool stream_used = 9;
  if (this->stream_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->stream_used(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraInfoFile.Camera.StreamInfo)
  return target;
}

size_t Camera_StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraInfoFile.Camera.StreamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string user_pw = 5;
  if (this->user_pw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_pw());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 stream_accumulate_time = 7;
  if (this->stream_accumulate_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stream_accumulate_time());
  }

  // bool tcp = 6;
  if (this->tcp() != 0) {
    total_size += 1 + 1;
  }

  // bool stream_used = 9;
  if (this->stream_used() != 0) {
    total_size += 1 + 1;
  }

  // uint32 fps = 8;
  if (this->fps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera_StreamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CameraInfoFile.Camera.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera_StreamInfo* source =
      ::google::protobuf::DynamicCastToGenerated<Camera_StreamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CameraInfoFile.Camera.StreamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CameraInfoFile.Camera.StreamInfo)
    MergeFrom(*source);
  }
}

void Camera_StreamInfo::MergeFrom(const Camera_StreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraInfoFile.Camera.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.user_pw().size() > 0) {

    user_pw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pw_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.stream_accumulate_time() != 0) {
    set_stream_accumulate_time(from.stream_accumulate_time());
  }
  if (from.tcp() != 0) {
    set_tcp(from.tcp());
  }
  if (from.stream_used() != 0) {
    set_stream_used(from.stream_used());
  }
  if (from.fps() != 0) {
    set_fps(from.fps());
  }
}

void Camera_StreamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CameraInfoFile.Camera.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera_StreamInfo::CopyFrom(const Camera_StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraInfoFile.Camera.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera_StreamInfo::IsInitialized() const {
  return true;
}

void Camera_StreamInfo::Swap(Camera_StreamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Camera_StreamInfo::InternalSwap(Camera_StreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_pw_.Swap(&other->user_pw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(stream_accumulate_time_, other->stream_accumulate_time_);
  swap(tcp_, other->tcp_);
  swap(stream_used_, other->stream_used_);
  swap(fps_, other->fps_);
}

::google::protobuf::Metadata Camera_StreamInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CameraInfoFile_2eproto);
  return ::file_level_metadata_CameraInfoFile_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Camera::InitAsDefaultInstance() {
}
class Camera::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Camera::kCameraGuidFieldNumber;
const int Camera::kCameraNameFieldNumber;
const int Camera::kStreamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Camera::Camera()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CameraInfoFile.Camera)
}
Camera::Camera(const Camera& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      stream_info_(from.stream_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.camera_guid().size() > 0) {
    camera_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_guid_);
  }
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.camera_name().size() > 0) {
    camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
  }
  // @@protoc_insertion_point(copy_constructor:CameraInfoFile.Camera)
}

void Camera::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Camera_CameraInfoFile_2eproto.base);
  camera_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:CameraInfoFile.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
  camera_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Camera& Camera::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Camera_CameraInfoFile_2eproto.base);
  return *internal_default_instance();
}


void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraInfoFile.Camera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_info_.Clear();
  camera_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Camera::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Camera*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string camera_guid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.Camera.camera_guid");
        object = msg->mutable_camera_guid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string camera_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.Camera.camera_name");
        object = msg->mutable_camera_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .CameraInfoFile.Camera.StreamInfo stream_info = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CameraInfoFile::Camera_StreamInfo::_InternalParse;
          object = msg->add_stream_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CameraInfoFile.Camera)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string camera_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_guid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->camera_guid().data(), static_cast<int>(this->camera_guid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.Camera.camera_guid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string camera_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->camera_name().data(), static_cast<int>(this->camera_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.Camera.camera_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CameraInfoFile.Camera.StreamInfo stream_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stream_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CameraInfoFile.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CameraInfoFile.Camera)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CameraInfoFile.Camera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_guid = 1;
  if (this->camera_guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera_guid().data(), static_cast<int>(this->camera_guid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.camera_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->camera_guid(), output);
  }

  // string camera_name = 2;
  if (this->camera_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera_name().data(), static_cast<int>(this->camera_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.camera_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camera_name(), output);
  }

  // repeated .CameraInfoFile.Camera.StreamInfo stream_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stream_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->stream_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CameraInfoFile.Camera)
}

::google::protobuf::uint8* Camera::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraInfoFile.Camera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_guid = 1;
  if (this->camera_guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera_guid().data(), static_cast<int>(this->camera_guid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.camera_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->camera_guid(), target);
  }

  // string camera_name = 2;
  if (this->camera_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera_name().data(), static_cast<int>(this->camera_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.Camera.camera_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->camera_name(), target);
  }

  // repeated .CameraInfoFile.Camera.StreamInfo stream_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stream_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->stream_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraInfoFile.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraInfoFile.Camera)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CameraInfoFile.Camera.StreamInfo stream_info = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stream_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stream_info(static_cast<int>(i)));
    }
  }

  // string camera_guid = 1;
  if (this->camera_guid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_guid());
  }

  // string camera_name = 2;
  if (this->camera_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CameraInfoFile.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::google::protobuf::DynamicCastToGenerated<Camera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CameraInfoFile.Camera)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CameraInfoFile.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraInfoFile.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_info_.MergeFrom(from.stream_info_);
  if (from.camera_guid().size() > 0) {

    camera_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_guid_);
  }
  if (from.camera_name().size() > 0) {

    camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
  }
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CameraInfoFile.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraInfoFile.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::Swap(Camera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stream_info_)->InternalSwap(CastToBase(&other->stream_info_));
  camera_guid_.Swap(&other->camera_guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  camera_name_.Swap(&other->camera_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CameraInfoFile_2eproto);
  return ::file_level_metadata_CameraInfoFile_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CameraWatchdog::InitAsDefaultInstance() {
}
class CameraWatchdog::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraWatchdog::kPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraWatchdog::CameraWatchdog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CameraInfoFile.CameraWatchdog)
}
CameraWatchdog::CameraWatchdog(const CameraWatchdog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:CameraInfoFile.CameraWatchdog)
}

void CameraWatchdog::SharedCtor() {
  pid_ = 0u;
}

CameraWatchdog::~CameraWatchdog() {
  // @@protoc_insertion_point(destructor:CameraInfoFile.CameraWatchdog)
  SharedDtor();
}

void CameraWatchdog::SharedDtor() {
}

void CameraWatchdog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraWatchdog& CameraWatchdog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CameraWatchdog_CameraInfoFile_2eproto.base);
  return *internal_default_instance();
}


void CameraWatchdog::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraInfoFile.CameraWatchdog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraWatchdog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CameraWatchdog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_pid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraWatchdog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CameraInfoFile.CameraWatchdog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CameraInfoFile.CameraWatchdog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CameraInfoFile.CameraWatchdog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraWatchdog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CameraInfoFile.CameraWatchdog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CameraInfoFile.CameraWatchdog)
}

::google::protobuf::uint8* CameraWatchdog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraInfoFile.CameraWatchdog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraInfoFile.CameraWatchdog)
  return target;
}

size_t CameraWatchdog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraInfoFile.CameraWatchdog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraWatchdog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CameraInfoFile.CameraWatchdog)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraWatchdog* source =
      ::google::protobuf::DynamicCastToGenerated<CameraWatchdog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CameraInfoFile.CameraWatchdog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CameraInfoFile.CameraWatchdog)
    MergeFrom(*source);
  }
}

void CameraWatchdog::MergeFrom(const CameraWatchdog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraInfoFile.CameraWatchdog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pid() != 0) {
    set_pid(from.pid());
  }
}

void CameraWatchdog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CameraInfoFile.CameraWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraWatchdog::CopyFrom(const CameraWatchdog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraInfoFile.CameraWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraWatchdog::IsInitialized() const {
  return true;
}

void CameraWatchdog::Swap(CameraWatchdog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraWatchdog::InternalSwap(CameraWatchdog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pid_, other->pid_);
}

::google::protobuf::Metadata CameraWatchdog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CameraInfoFile_2eproto);
  return ::file_level_metadata_CameraInfoFile_2eproto[kIndexInFileMessages];
}


// ===================================================================

void System_CameraInfo::InitAsDefaultInstance() {
}
class System_CameraInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int System_CameraInfo::kCameraGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

System_CameraInfo::System_CameraInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CameraInfoFile.System.CameraInfo)
}
System_CameraInfo::System_CameraInfo(const System_CameraInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.camera_guid().size() > 0) {
    camera_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_guid_);
  }
  // @@protoc_insertion_point(copy_constructor:CameraInfoFile.System.CameraInfo)
}

void System_CameraInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_System_CameraInfo_CameraInfoFile_2eproto.base);
  camera_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

System_CameraInfo::~System_CameraInfo() {
  // @@protoc_insertion_point(destructor:CameraInfoFile.System.CameraInfo)
  SharedDtor();
}

void System_CameraInfo::SharedDtor() {
  camera_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void System_CameraInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const System_CameraInfo& System_CameraInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_System_CameraInfo_CameraInfoFile_2eproto.base);
  return *internal_default_instance();
}


void System_CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraInfoFile.System.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* System_CameraInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<System_CameraInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string camera_guid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.System.CameraInfo.camera_guid");
        object = msg->mutable_camera_guid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool System_CameraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CameraInfoFile.System.CameraInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string camera_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_guid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->camera_guid().data(), static_cast<int>(this->camera_guid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.System.CameraInfo.camera_guid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CameraInfoFile.System.CameraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CameraInfoFile.System.CameraInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void System_CameraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CameraInfoFile.System.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_guid = 1;
  if (this->camera_guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera_guid().data(), static_cast<int>(this->camera_guid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.System.CameraInfo.camera_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->camera_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CameraInfoFile.System.CameraInfo)
}

::google::protobuf::uint8* System_CameraInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraInfoFile.System.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_guid = 1;
  if (this->camera_guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera_guid().data(), static_cast<int>(this->camera_guid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.System.CameraInfo.camera_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->camera_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraInfoFile.System.CameraInfo)
  return target;
}

size_t System_CameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraInfoFile.System.CameraInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_guid = 1;
  if (this->camera_guid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void System_CameraInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CameraInfoFile.System.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const System_CameraInfo* source =
      ::google::protobuf::DynamicCastToGenerated<System_CameraInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CameraInfoFile.System.CameraInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CameraInfoFile.System.CameraInfo)
    MergeFrom(*source);
  }
}

void System_CameraInfo::MergeFrom(const System_CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraInfoFile.System.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_guid().size() > 0) {

    camera_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_guid_);
  }
}

void System_CameraInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CameraInfoFile.System.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void System_CameraInfo::CopyFrom(const System_CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraInfoFile.System.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System_CameraInfo::IsInitialized() const {
  return true;
}

void System_CameraInfo::Swap(System_CameraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void System_CameraInfo::InternalSwap(System_CameraInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  camera_guid_.Swap(&other->camera_guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata System_CameraInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CameraInfoFile_2eproto);
  return ::file_level_metadata_CameraInfoFile_2eproto[kIndexInFileMessages];
}


// ===================================================================

void System::InitAsDefaultInstance() {
}
class System::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int System::kSystemGuidFieldNumber;
const int System::kSystemNameFieldNumber;
const int System::kCamerasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

System::System()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CameraInfoFile.System)
}
System::System(const System& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      cameras_(from.cameras_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_guid().size() > 0) {
    system_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_guid_);
  }
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_name().size() > 0) {
    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  // @@protoc_insertion_point(copy_constructor:CameraInfoFile.System)
}

void System::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_System_CameraInfoFile_2eproto.base);
  system_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

System::~System() {
  // @@protoc_insertion_point(destructor:CameraInfoFile.System)
  SharedDtor();
}

void System::SharedDtor() {
  system_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void System::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const System& System::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_System_CameraInfoFile_2eproto.base);
  return *internal_default_instance();
}


void System::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraInfoFile.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameras_.Clear();
  system_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* System::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<System*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string system_guid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.System.system_guid");
        object = msg->mutable_system_guid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string system_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CameraInfoFile.System.system_name");
        object = msg->mutable_system_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .CameraInfoFile.System.CameraInfo cameras = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::CameraInfoFile::System_CameraInfo::_InternalParse;
          object = msg->add_cameras();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool System::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CameraInfoFile.System)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string system_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_guid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_guid().data(), static_cast<int>(this->system_guid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.System.system_guid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string system_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_name().data(), static_cast<int>(this->system_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CameraInfoFile.System.system_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CameraInfoFile.System.CameraInfo cameras = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cameras()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CameraInfoFile.System)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CameraInfoFile.System)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void System::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CameraInfoFile.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system_guid = 1;
  if (this->system_guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_guid().data(), static_cast<int>(this->system_guid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.System.system_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system_guid(), output);
  }

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.System.system_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->system_name(), output);
  }

  // repeated .CameraInfoFile.System.CameraInfo cameras = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cameras_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->cameras(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CameraInfoFile.System)
}

::google::protobuf::uint8* System::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraInfoFile.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system_guid = 1;
  if (this->system_guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_guid().data(), static_cast<int>(this->system_guid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.System.system_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->system_guid(), target);
  }

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CameraInfoFile.System.system_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->system_name(), target);
  }

  // repeated .CameraInfoFile.System.CameraInfo cameras = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cameras_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cameras(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraInfoFile.System)
  return target;
}

size_t System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraInfoFile.System)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CameraInfoFile.System.CameraInfo cameras = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cameras_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cameras(static_cast<int>(i)));
    }
  }

  // string system_guid = 1;
  if (this->system_guid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_guid());
  }

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void System::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CameraInfoFile.System)
  GOOGLE_DCHECK_NE(&from, this);
  const System* source =
      ::google::protobuf::DynamicCastToGenerated<System>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CameraInfoFile.System)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CameraInfoFile.System)
    MergeFrom(*source);
  }
}

void System::MergeFrom(const System& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraInfoFile.System)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cameras_.MergeFrom(from.cameras_);
  if (from.system_guid().size() > 0) {

    system_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_guid_);
  }
  if (from.system_name().size() > 0) {

    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
}

void System::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CameraInfoFile.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void System::CopyFrom(const System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraInfoFile.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System::IsInitialized() const {
  return true;
}

void System::Swap(System* other) {
  if (other == this) return;
  InternalSwap(other);
}
void System::InternalSwap(System* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cameras_)->InternalSwap(CastToBase(&other->cameras_));
  system_guid_.Swap(&other->system_guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_name_.Swap(&other->system_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata System::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_CameraInfoFile_2eproto);
  return ::file_level_metadata_CameraInfoFile_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CameraInfoFile
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::CameraInfoFile::Camera_StreamInfo* Arena::CreateMaybeMessage< ::CameraInfoFile::Camera_StreamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CameraInfoFile::Camera_StreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CameraInfoFile::Camera* Arena::CreateMaybeMessage< ::CameraInfoFile::Camera >(Arena* arena) {
  return Arena::CreateInternal< ::CameraInfoFile::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::CameraInfoFile::CameraWatchdog* Arena::CreateMaybeMessage< ::CameraInfoFile::CameraWatchdog >(Arena* arena) {
  return Arena::CreateInternal< ::CameraInfoFile::CameraWatchdog >(arena);
}
template<> PROTOBUF_NOINLINE ::CameraInfoFile::System_CameraInfo* Arena::CreateMaybeMessage< ::CameraInfoFile::System_CameraInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CameraInfoFile::System_CameraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CameraInfoFile::System* Arena::CreateMaybeMessage< ::CameraInfoFile::System >(Arena* arena) {
  return Arena::CreateInternal< ::CameraInfoFile::System >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
