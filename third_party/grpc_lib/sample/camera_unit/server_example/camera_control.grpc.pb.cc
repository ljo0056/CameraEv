// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camera_control.proto
#include "stdafx.h"

#include "camera_control.pb.h"
#include "camera_control.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace camera_control {

static const char* CameraControl_method_names[] = {
  "/camera_control.CameraControl/Command",
  "/camera_control.CameraControl/VideoStream",
  "/camera_control.CameraControl/VideoAnalysis",
};

std::unique_ptr< CameraControl::Stub> CameraControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CameraControl::Stub> stub(new CameraControl::Stub(channel));
  return stub;
}

CameraControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Command_(CameraControl_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VideoStream_(CameraControl_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_VideoAnalysis_(CameraControl_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status CameraControl::Stub::Command(::grpc::ClientContext* context, const ::camera_control::Packet& request, ::camera_control::Packet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Command_, context, request, response);
}

void CameraControl::Stub::experimental_async::Command(::grpc::ClientContext* context, const ::camera_control::Packet* request, ::camera_control::Packet* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, std::move(f));
}

void CameraControl::Stub::experimental_async::Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::camera_control::Packet* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::camera_control::Packet>* CameraControl::Stub::AsyncCommandRaw(::grpc::ClientContext* context, const ::camera_control::Packet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::camera_control::Packet>::Create(channel_.get(), cq, rpcmethod_Command_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::camera_control::Packet>* CameraControl::Stub::PrepareAsyncCommandRaw(::grpc::ClientContext* context, const ::camera_control::Packet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::camera_control::Packet>::Create(channel_.get(), cq, rpcmethod_Command_, context, request, false);
}

::grpc::ClientReader< ::camera_control::Packet>* CameraControl::Stub::VideoStreamRaw(::grpc::ClientContext* context, const ::camera_control::Packet& request) {
  return ::grpc::internal::ClientReaderFactory< ::camera_control::Packet>::Create(channel_.get(), rpcmethod_VideoStream_, context, request);
}

void CameraControl::Stub::experimental_async::VideoStream(::grpc::ClientContext* context, ::camera_control::Packet* request, ::grpc::experimental::ClientReadReactor< ::camera_control::Packet>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::camera_control::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_VideoStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::camera_control::Packet>* CameraControl::Stub::AsyncVideoStreamRaw(::grpc::ClientContext* context, const ::camera_control::Packet& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::camera_control::Packet>::Create(channel_.get(), cq, rpcmethod_VideoStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::camera_control::Packet>* CameraControl::Stub::PrepareAsyncVideoStreamRaw(::grpc::ClientContext* context, const ::camera_control::Packet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::camera_control::Packet>::Create(channel_.get(), cq, rpcmethod_VideoStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::camera_control::Packet>* CameraControl::Stub::VideoAnalysisRaw(::grpc::ClientContext* context, const ::camera_control::Packet& request) {
  return ::grpc::internal::ClientReaderFactory< ::camera_control::Packet>::Create(channel_.get(), rpcmethod_VideoAnalysis_, context, request);
}

void CameraControl::Stub::experimental_async::VideoAnalysis(::grpc::ClientContext* context, ::camera_control::Packet* request, ::grpc::experimental::ClientReadReactor< ::camera_control::Packet>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::camera_control::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_VideoAnalysis_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::camera_control::Packet>* CameraControl::Stub::AsyncVideoAnalysisRaw(::grpc::ClientContext* context, const ::camera_control::Packet& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::camera_control::Packet>::Create(channel_.get(), cq, rpcmethod_VideoAnalysis_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::camera_control::Packet>* CameraControl::Stub::PrepareAsyncVideoAnalysisRaw(::grpc::ClientContext* context, const ::camera_control::Packet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::camera_control::Packet>::Create(channel_.get(), cq, rpcmethod_VideoAnalysis_, context, request, false, nullptr);
}

CameraControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraControl::Service, ::camera_control::Packet, ::camera_control::Packet>(
          std::mem_fn(&CameraControl::Service::Command), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CameraControl::Service, ::camera_control::Packet, ::camera_control::Packet>(
          std::mem_fn(&CameraControl::Service::VideoStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CameraControl::Service, ::camera_control::Packet, ::camera_control::Packet>(
          std::mem_fn(&CameraControl::Service::VideoAnalysis), this)));
}

CameraControl::Service::~Service() {
}

::grpc::Status CameraControl::Service::Command(::grpc::ServerContext* context, const ::camera_control::Packet* request, ::camera_control::Packet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraControl::Service::VideoStream(::grpc::ServerContext* context, const ::camera_control::Packet* request, ::grpc::ServerWriter< ::camera_control::Packet>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraControl::Service::VideoAnalysis(::grpc::ServerContext* context, const ::camera_control::Packet* request, ::grpc::ServerWriter< ::camera_control::Packet>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace camera_control

